import requests
from bs4 import BeautifulSoup
from urllib.parse import urlparse, parse_qsl, urlencode, urlunparse

def test_sql_injection(url):
    """
    Test for SQL Injection by injecting a simple payload and observing response difference.
    """
    payload = "' OR '1'='1"
    parsed = urlparse(url)
    if not parsed.query:
        # If no query, add a dummy parameter
        test_url = url + "?id=1"
        inj_url = url + "?id=1" + payload
    else:
        # Inject into the first query parameter
        params = dict(parse_qsl(parsed.query))
        first = list(params.keys())[0]
        normal_params = params.copy()
        inj_params = params.copy()
        inj_params[first] = params[first] + payload
        test_url = urlunparse(parsed._replace(query=urlencode(normal_params)))
        inj_url = urlunparse(parsed._replace(query=urlencode(inj_params)))
    try:
        normal_resp = requests.get(test_url, timeout=5)
        inj_resp = requests.get(inj_url, timeout=5)
        if normal_resp.status_code == 200 and inj_resp.status_code == 200:
            # Compare responses or look for SQL error messages
            if normal_resp.text != inj_resp.text or "sql" in inj_resp.text.lower():
                return True
    except Exception:
        return False
    return False

def test_xss(url):
    """
    Test for reflected XSS by injecting a script tag into a URL parameter and checking output.
    """
    payload = "<script>alert('XSS')</script>"
    parsed = urlparse(url)
    if not parsed.query:
        test_url = url + "?q=test"
        inj_url = url + "?q=" + requests.utils.requote_uri(payload)
    else:
        params = dict(parse_qsl(parsed.query))
        first = list(params.keys())[0]
        inj_params = params.copy()
        inj_params[first] = payload
        inj_url = urlunparse(parsed._replace(query=urlencode(inj_params)))
    try:
        inj_resp = requests.get(inj_url, timeout=5)
        # If the payload appears unescaped in the response, it's vulnerable
        if payload in inj_resp.text:
            return True
    except Exception:
        return False
    return False

def test_open_redirect(url):
    """
    Test for open redirect by appending a known malicious URL to common redirect parameters.
    """
    redirect_target = "http://evil.com"
    common_params = ["redirect", "url", "next", "continue", "dest", "path"]
    parsed = urlparse(url)
    base = urlunparse(parsed._replace(query=""))
    original_params = dict(parse_qsl(parsed.query))
    for param in common_params:
        params = original_params.copy()
        params[param] = redirect_target
        test_url = urlunparse(parsed._replace(query=urlencode(params)))
        try:
            # Allow redirects to see final location
            resp = requests.get(test_url, timeout=5, allow_redirects=True)
            if resp.history:
                final_url = resp.url
                if final_url.startswith(redirect_target):
                    return True
        except Exception:
            continue
    return False

def test_csrf(url):
    """
    Test for CSRF by checking forms on the page for anti-CSRF tokens.
    """
    try:
        resp = requests.get(url, timeout=5)
        soup = BeautifulSoup(resp.text, 'html.parser')
        forms = soup.find_all('form')
        if not forms:
            return False  # No forms means no obvious CSRF vector
        for form in forms:
            hidden = form.find_all('input', {'type': 'hidden'})
            # Look for common CSRF token fields (e.g., name or id contains 'csrf')
            token_present = any(
                'csrf' in (inp.get('name') or '').lower() or
                'csrf' in (inp.get('id') or '').lower()
                for inp in hidden
            )
            if not token_present:
                # If any form lacks a CSRF token, flag it
                return True
    except Exception:
        return False
    return False

def scan_url(url):
    """
    Aggregate all vulnerability tests for the given URL.
    """
    return {
        "SQL Injection": test_sql_injection(url),
        "XSS": test_xss(url),
        "Open Redirect": test_open_redirect(url),
        "CSRF": test_csrf(url)
    }
