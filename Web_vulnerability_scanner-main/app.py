from flask import Flask, render_template, request, send_file
import os
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from reportlab.pdfgen import canvas

app = Flask(__name__)
PDF_PATH = "report.pdf"

SQLI_PAYLOAD = "' OR '1'='1"
XSS_PAYLOAD = "<script>alert('XSS')</script>"
REDIRECT_PAYLOAD = "http://evil.com"

def scan_website(url):
    vulnerabilities = []

    try:
        response = requests.get(url, timeout=5)
        if response.status_code != 200:
            vulnerabilities.append("Site is unreachable or returned error.")
            return vulnerabilities

        soup = BeautifulSoup(response.text, 'html.parser')

        # Check for CSRF token
        forms = soup.find_all("form")
        for form in forms:
            if not form.find("input", {"name": "csrf_token"}):
                vulnerabilities.append("Form missing CSRF token (potential CSRF vulnerability).")

        # Test forms for SQLi and XSS
        for form in forms:
            action = form.get("action")
            method = form.get("method", "get").lower()
            form_url = urljoin(url, action)
            inputs = form.find_all("input")
            data = {}

            for input_tag in inputs:
                name = input_tag.get("name")
                if not name:
                    continue
                input_type = input_tag.get("type", "text")
                if input_type == "text":
                    data[name] = SQLI_PAYLOAD

            if method == "post":
                form_response = requests.post(form_url, data=data)
            else:
                form_response = requests.get(form_url, params=data)

            if "sql" in form_response.text.lower() or "syntax" in form_response.text.lower():
                vulnerabilities.append("Possible SQL Injection vulnerability detected.")

            # XSS check
            for input_tag in inputs:
                name = input_tag.get("name")
                if not name:
                    continue
                data[name] = XSS_PAYLOAD

            if method == "post":
                xss_response = requests.post(form_url, data=data)
            else:
                xss_response = requests.get(form_url, params=data)

            if XSS_PAYLOAD in xss_response.text:
                vulnerabilities.append("Reflected Cross-Site Scripting (XSS) vulnerability detected.")

        # Open Redirect check
        if "redirect" in url.lower():
            redirect_test_url = url + REDIRECT_PAYLOAD
            redirect_response = requests.get(redirect_test_url, allow_redirects=False)
            if redirect_response.status_code in [301, 302] and 'Location' in redirect_response.headers:
                if REDIRECT_PAYLOAD in redirect_response.headers['Location']:
                    vulnerabilities.append("Potential Open Redirect vulnerability detected.")

    except Exception as e:
        vulnerabilities.append(f"Error during scanning: {e}")

    if not vulnerabilities:
        vulnerabilities.append("No common vulnerabilities found.")

    return vulnerabilities

def generate_pdf(results):
    c = canvas.Canvas(PDF_PATH)
    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, 800, "Vulnerability Scan Report")
    c.setFont("Helvetica", 12)
    y = 770
    for result in results:
        c.drawString(50, y, f"- {result}")
        y -= 20
    c.save()

@app.route("/", methods=["GET"])
def index():
    return render_template("index.html")

@app.route("/scan", methods=["POST"])
def scan():
    url = request.form.get("url")
    results = scan_website(url)
    generate_pdf(results)
    return render_template("index.html", results=results)

@app.route("/download")
def download():
    if os.path.exists(PDF_PATH):
        return send_file(PDF_PATH, as_attachment=True)
    return "PDF not found", 404

if __name__ == "__main__":
    app.run(debug=True)

